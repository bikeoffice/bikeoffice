name: Build and Deploy to AWS

on:
    push:
        branches: ["main"]

env:
    AWS_REGION: us-east-1
    ENVIRONMENT: production
    FRONT_REPOSITORY: bikeoffice-web
    BACK_REPOSITORY: bikeoffice-api

jobs:
    deploy:
        name: Build & Deploy
        runs-on: ubuntu-latest
        environment: production
        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Build Projects
              run: |
                  npm ci
                  npm i -g nx
                  nx run-many -t build

            - name: bikeoffice-web | Restore Front Build
              id: front-cache
              uses: actions/cache@v3
              env:
                  cache-name: front-hash-cache
              with:
                  path: ./dist/bikeoffice-web
                  key: front-build-${{ env.cache-name }}-${{ hashFiles('./dist/bikeoffice-web/**') }}

            - name: bikeoffice-api | Restore Back Build
              id: back-cache
              uses: actions/cache@v3
              env:
                  cache-name: back-hash-cache
              with:
                  path: ./dist/bikeoffice-api
                  key: back-build-${{ env.cache-name }}-${{ hashFiles('./dist/bikeoffice-api/**') }}

            - name: Configure AWS Credentials
              #if: ${{ steps.front-cache.outputs.cache-hit != 'true' ||  steps.back-cache.outputs.cache-hit != 'true' }}
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              #if: ${{ steps.front-cache.outputs.cache-hit != 'true' ||  steps.back-cache.outputs.cache-hit != 'true' }}
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: bikeoffice-web | Build and Push Front Image
              #if: ${{ steps.front-cache.outputs.cache-hit != 'true' }}
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $ECR_REGISTRY/$FRONT_REPOSITORY -t $ECR_REGISTRY/$FRONT_REPOSITORY:$IMAGE_TAG -f $FRONT_REPOSITORY/Dockerfile .
                  docker push -a $ECR_REGISTRY/$FRONT_REPOSITORY

            - name: bikeoffice-api | Build and Push Back Image
              #if: ${{ steps.back-cache.outputs.cache-hit != 'true' }}
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $ECR_REGISTRY/$BACK_REPOSITORY -t $ECR_REGISTRY/$BACK_REPOSITORY:$IMAGE_TAG -f $BACK_REPOSITORY/Dockerfile .
                  docker push -a $ECR_REGISTRY/$BACK_REPOSITORY

            - name: Download Task Definition
              #if: ${{ steps.front-cache.outputs.cache-hit != 'true' ||  steps.back-cache.outputs.cache-hit != 'true' }}
              run: aws ecs describe-task-definition --task-definition $ENVIRONMENT --query taskDefinition > task-definition.json

            - name: Launch Amazon ECS Task Definition
              #if: ${{ steps.front-cache.outputs.cache-hit != 'true' ||  steps.back-cache.outputs.cache-hit != 'true' }}
              uses: aws-actions/amazon-ecs-deploy-task-definition@v1
              with:
                  task-definition: task-definition.json
                  service: ${{ env.PRODUCTION }}
                  cluster: ${{ env.PRODUCTION }}
                  wait-for-service-stability: false
