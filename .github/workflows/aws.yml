name: Deploy to Amazon ECS

on:
  push:
    branches: ["feat/deploy"]

env:
  AWS_REGION: us-east-1
  ECS_SERVICE: production
  ECS_CLUSTER: production
  TASK_FAMILY: production
  FRONT_REPOSITORY: bikeoffice-web
  BACK_REPOSITORY: bikeoffice-api

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build Project
        run: |
          npm ci
          npm i -g nx
          nx run-many -t build

      - name: Restore Front Build
        id: front-cache
        uses: actions/cache@v3
        env:
          cache-name: front-hash-cache
        with:
          path: ./dist/bikeoffice-web
          key: front-build-${{ env.cache-name }}-${{ hashFiles('./dist/bikeoffice-web/assets/index*') }}

      - name: Restore Back Build
        id: back-cache
        uses: actions/cache@v3
        env:
          cache-name: back-hash-cache
        with:
          path: ./dist/bikeoffice-api
          key: back-build-${{ env.cache-name }}-${{ hashFiles('./dist/bikeoffice-api/main.js') }}

      - name: Configure AWS credentials
        if: ${{ steps.front-cache.outputs.cache-hit != 'true' ||  steps.back-cache.outputs.cache-hit != 'true' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        if: ${{ steps.front-cache.outputs.cache-hit != 'true' ||  steps.back-cache.outputs.cache-hit != 'true' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Front image
        if: ${{ steps.front-cache.outputs.cache-hit != 'true' }}
        id: build-front-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$FRONT_REPOSITORY -t $ECR_REGISTRY/$FRONT_REPOSITORY:$IMAGE_TAG -f $FRONT_REPOSITORY/Dockerfile .
          docker push -a $ECR_REGISTRY/$FRONT_REPOSITORY

      - name: Build, tag, and push Back image
        if: ${{ steps.back-cache.outputs.cache-hit != 'true' }}
        id: build-back-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$BACK_REPOSITORY -t $ECR_REGISTRY/$BACK_REPOSITORY:$IMAGE_TAG -f $BACK_REPOSITORY/Dockerfile .
          docker push -a $ECR_REGISTRY/$BACK_REPOSITORY

      - name: Download task definition
        if: ${{ steps.front-cache.outputs.cache-hit != 'true' ||  steps.back-cache.outputs.cache-hit != 'true' }}
        run: aws ecs describe-task-definition --task-definition $TASK_FAMILY --query taskDefinition > task-definition.json

      - name: Deploy Amazon ECS task definition
        if: ${{ steps.front-cache.outputs.cache-hit != 'true' ||  steps.back-cache.outputs.cache-hit != 'true' }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: task-definition.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false
